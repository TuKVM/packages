# Maintainer: graysky <therealgraysky AT proton DOT me>
# Maintainer: Kevin Mihelich <kevin@archlinuxarm.org>
# Maintainer: Oleg Rakhmanov <oleg@archlinuxarm.org>
# Maintainer: Dave Higham <pepedog@archlinuxarm.org>
# Contributer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>

_pikvm_use_distcc=1

pkgbase=linux-t113i
_commit=d3d24545684c6b6637603e14443bbd67dae59413
# _kernelname=${pkgbase#linux}
_regen=
pkgver=6.8.9
pkgrel=2
pkgdesc='Linux'
_srcname=linux-${pkgver}
url="https://github.com/torvalds/linux"
arch=(armv7h)
license=(GPL2)
makedepends=(
  bc
  kmod
  inetutils
)
options=('!strip')
source_armv7h=('config')
source=("https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
        1001-add-tukvm-devicetree.patch
        1002-phy-disable-gigabit.patch
        2001-rename-msd.patch
)
md5sums=('SKIP'
         'cb88df49c61e82988ec0a11e6f11ed5b'
         '1fa136a0852d7d2755712ae00c9cdf96'
         'f1c8f1c73c0d546b770b8c6c9a79acd0')
md5sums_armv7h=('2f777f5000390da214cfda069e9e3b45')

# setup vars
if [[ $CARCH == "armv7h" ]]; then
  _kernel=zImage KARCH=arm _image=zImage _config=config
fi

_make() {
  test -s version
  make KERNELRELEASE="$(<version)" "$@"
}

prepare() {
  cd "${srcdir}/${_srcname}"

  echo "Applying patches..."
  patch -p1 -i ../1001-add-tukvm-devicetree.patch
  patch -p1 -i ../1002-phy-disable-gigabit.patch
  patch -p1 -i ../2001-rename-msd.patch

  if [ "$_pikvm_use_distcc" -eq 1 ]; then
    sed -i '/HAVE_GCC_PLUGINS/d' arch/arm/Kconfig
  fi

  echo "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  echo "Setting config..."
  cp ../"$_config" .config
  scripts/config --enable CONFIG_DYNAMIC_DEBUG
  scripts/config --enable CONFIG_DYNAMIC_DEBUG_CORE
  make olddefconfig
  diff -u ../"$_config" .config || :

  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd "${srcdir}/${_srcname}"

  if [ "$_pikvm_use_distcc" -eq 1 ]; then
    _make "$_image" modules dtbs CC=distcc CXX=distcc
  else
    _make "$_image" modules dtbs
  fi
}

_package-tukvm() {
  pkgdesc="Linux kernel and modules (TuKVM fork)"
  depends=(
    coreutils
    kmod
    linux-firmware-pikvm
  )
  optdepends=(
    'wireless-regdb: to set the correct wireless channels of your country'
  )
  provides=(
    linux="${pkgver}"
    WIREGUARD-MODULE
  )
  conflicts=(
    linux
  )
  replaces=(
  )
  install=linux.install
  backup=(
  )

  cd "${srcdir}/${_srcname}"

  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  # # Used by mkinitcpio to name the kernel
  # echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  _make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

  # remove build link
  rm -f "$modulesdir"/build

  echo "Installing Arch ARM specific stuff..."
  mkdir -p "${pkgdir}"/boot
  make INSTALL_DTBS_PATH="${pkgdir}/boot/dtbs" dtbs_install

  cp arch/$KARCH/boot/$_image "${pkgdir}/boot/$_kernel"

  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|$(<version)|g
  "

  # # install mkinitcpio preset file
  # sed "${_subst}" ../linux.preset |
  #   install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # # rather than use another hook (90-linux.hook) rely on mkinitcpio's 90-mkinitcpio-install.hook
  # # which avoids a double run of mkinitcpio that can occur
  # touch "${pkgdir}/usr/lib/modules/$(<version)/vmlinuz"
}

_package-headers-tukvm() {
  pkgdesc="Headers and scripts for building modules for Linux kernel"
  provides=("linux-headers=${pkgver}")
  conflicts=('linux-headers')
  replaces=()

  cd ${_srcname}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/$KARCH" -m644 "arch/$KARCH/Makefile"
  cp -t "$builddir" -a scripts

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/$KARCH" -a "arch/$KARCH/include"
  install -Dt "$builddir/arch/$KARCH/kernel" -m644 "arch/$KARCH/kernel/asm-offsets.s"

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local _arch
  for _arch in "$builddir"/arch/*/; do
    if [[ $CARCH == "aarch64" ]]; then
      [[ $_arch = */"$KARCH"/ || $_arch == */arm/ ]] && continue
    else
      [[ $_arch = */"$KARCH"/ ]] && continue
    fi
    echo "Removing $(basename "$_arch")"
    rm -r "$_arch"
  done

  echo "Symlinking common aliases..."
  # https://archlinuxarm.org/forum/viewtopic.php?f=60&t=16354
  ln -sr arm "$builddir/arch/armv7h"
  ln -sr arm "$builddir/arch/armv7l"

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

_package-api-headers-tukvm() {
  pkgdesc="Kernel headers sanitized for use in userspace"
  provides=("linux-api-headers=${pkgver}")
  conflicts=('linux-api-headers')
  replaces=()

  cd ${_srcname}
  make INSTALL_HDR_PATH="$pkgdir/usr" headers_install

  # use headers from libdrm
  rm -r "$pkgdir/usr/include/drm"
}

pkgname=("${pkgbase}-tukvm" "${pkgbase}-headers-tukvm" "${pkgbase}-api-headers-tukvm")
for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    _package${_p#${pkgbase}}
  }"
done
